config = importWholeConfig* partialImport* definition*

importWholeConfig = importStr | importStarred
importStr = 'import' STRING
importStarred = 'from' (IDENTIFIER | '.')? '.' dotted 'import' '*'

partialImport = importSimple | importFrom | importFromConfig
importSimple = 'import' dotted_import_as (',' dotted_import_as)*
importFrom = 'from' dotted 'import' many_import_as
importFromConfig = 'from' ('.')? '.' dotted 'import' many_import_as

dotted = IDENTIFIER ('.' IDENTIFIER)*
import_as = IDENTIFIER (as IDENTIFIER)?
many_import_as = import_as (',' import_as)*
dotted_import_as = dotted (as IDENTIFIER)?

definition = IDENTIFIER '=' inlineIf
inlineIf = expression ('if' expression 'else' inlineIf)

expression = orExp
orExp = andExp ('or' andExp)*
andExp = notExp ('and' notExp)*
notExp = 'not'? comparison
comparison = orBitExp (compOperator orBitExp)*
compOperator = '<' | '>' | '==' | '>=' | '<=' | '!=' | 'in' | ('not' 'in') | 'is' | ('is' 'not')

orBitExp = xorBitExp ('|' xorBitExp)*
xorBitExp = andBitExp ('^' andBitExp)*
andBitExp = shiftExp ('&' shiftExp)*
shiftExp = arithmetic ( '<<' | '>>' arithmetic)*
arithmetic = term ( '+' | '-' term)*
term = factor ( '*' | '@' | '/' | '%' | '//' factor)*
factor = ( '+' | '-' | '~' )? power
power: tailed ('**' factor)?

tailed = primary (getAttribute | call | getItem)*
getItem = '[' expression (',' expression)* ','? ']'
getAttribute = '.' IDENTIFIER
call = '(' params ')'
params = LAZY? (positional | keyword | (positional ',' keyword) ','?)?
positional = '*'? expression (',' '*'? expression)*
keyword = definition (',' definition)*

primary = lambda | dictionary | array | tuple | IDENTIFIER | STRING | NUMBER | 'None' | 'False' | 'True'
    | '(' expression ')'
dictionary = '{' (pair (',' pair)* ','?)? '}'
pair = inlineIf ':' inlineIf
array = '[' (starredOrInline (',' starredOrInline)* ','?)? ']'
tuple = '(' (starredOrInline (',' starredOrInline)* ','?)? ')'
starredOrInline = inlineIf | ('*' orBitExp)
# TODO: add kwargs
lambda = 'lambda' ((argsDef (',' varargDef)?) | varargDef)? ':' expression
argsDef = (IDENTIFIER (',' IDENTIFIER)*)?
varargDef = '*' IDENTIFIER

LAZY = '#\s*lazy\s*$'

// this is an approximate regex. the true one is simply imported from `tokenize`
STRING = r'''(\"\"\"|\'\'\'|\"|\')((?<!\\)(\\\\)*\\\1]|.)*?\1'''
NUMBER = r'-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?'
IDENTIFIER = r'[^\d\W]\w*'
COMMENT = r'#.*$'
