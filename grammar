config = importWholeConfig* partialImport* (multipleDefinitions | funcDef)*

importWholeConfig = importStr | importStarred
importStr = 'import' STRING
importStarred = 'from' '.'* dotted 'import' '*'

partialImport = importSimple | importFrom | importFromConfig
importSimple = 'import' dotted_import_as (',' dotted_import_as)*
importFrom = 'from' dotted 'import' many_import_as
importFromConfig = 'from' '.'* dotted 'import' many_import_as

dotted = IDENTIFIER ('.' IDENTIFIER)*
import_as = IDENTIFIER (as IDENTIFIER)?
many_import_as = import_as (',' import_as)*
dotted_import_as = dotted (as IDENTIFIER)?

funcDef = 'def' IDENTIFIER '(' params ')' ':' definition* 'return' inlineIf

definition = IDENTIFIER '=' inlineIf
multipleDefinitions = (IDENTIFIER '=')+ inlineIf
inlineIf = expression ('if' expression 'else' inlineIf)

expression = orExp
orExp = andExp ('or' andExp)*
andExp = notExp ('and' notExp)*
notExp = 'not'? comparison
comparison = orBitExp (compOperator orBitExp)*
compOperator = '<' | '>' | '==' | '>=' | '<=' | '!=' | 'in' | ('not' 'in') | 'is' | ('is' 'not')

orBitExp = xorBitExp ('|' xorBitExp)*
xorBitExp = andBitExp ('^' andBitExp)*
andBitExp = shiftExp ('&' shiftExp)*
shiftExp = arithmetic ( '<<' | '>>' arithmetic)*
arithmetic = term ( '+' | '-' term)*
term = factor ( '*' | '@' | '/' | '%' | '//' factor)*
factor = ( '+' | '-' | '~' )? power
power: tailed ('**' factor)?

tailed = primary (getAttribute | call | getItem)*
getAttribute = '.' IDENTIFIER
getItem = '[' sliceOrIf (',' sliceOrIf)* ','? ']'
call = '(' arguments ')'

sliceOrIf =  inlineIf | ( inlineIf? ':' inlineIf? (':' inlineIf?)? )
arguments = LAZY? (positional | keyword | (positional ',' keyword) ','?)?
positional = '*'? inlineIf (',' '*'? inlineIf)*
keyword = definition (',' definition)*

primary = lambda | dictionary | array | tuple | set | IDENTIFIER | STRING | NUMBER | 'None' | 'False' | 'True' | '...'
    | '(' inlineIf ')'
dictionary = '{' (pair (',' pair)* ','?)? '}'
pair = inlineIf ':' inlineIf
array = '[' (starredOrInline (',' starredOrInline)* ','?)? ']'
set = '{' (starredOrInline (',' starredOrInline)* ','?)? '}'
tuple = '(' (starredOrInline (',' starredOrInline)* ','?)? ')'
starredOrInline = inlineIf | ('*' orBitExp)
// this part is not a valid grammar, but i'm too lazy
lambda = 'lambda' params ':' inlineIf
params = (arg* ('*' IDENTIFIER)? arg*)
arg = IDENTIFIER ('=' inlineIf)?

LAZY = '^#\s*(lazy|partial)\s*$'
