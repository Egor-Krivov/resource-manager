config = extends? definition*

extends = '@extends' paths | lambdaBlock(paths)
paths = (STRING ','?)+
lambdaBlock(x) = LAMBDA_OPEN x LAMBDA_CLOSE

definition = IDENTIFIER '=' expression | moduleAssign

moduleAssign = moduleName (BLOCK_OPEN params BLOCK_CLOSE)?
moduleLambda = moduleName ( lambdaBlock(params) )?
moduleName = IDENTIFIER ':' IDENTIFIER
params = init? (definition ','?)*
init = '@init' '=' bool ','?

expression = jsonAllowed getAttribute*
getAttribute = '.' IDENTIFIER

jsonAllowed = moduleLambda | IDENTIFIER | object | array | STRING | NUMBER | 'null' | bool
object = '{' (STRING ':' jsonAllowed ','?)* '}'
array = '[' (jsonAllowed ','?)* ']'
bool = 'false' | 'true'

STRING = r'"(\\([\"\\\/bfnrt]|u[a-fA-F0-9]{4})|[^\"\\\0-\x1F\x7F]+)*"'
NUMBER = r'-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]+)?'
IDENTIFIER = r'[^\d\W]\w*'

LAMBDA_OPEN = '('
LAMBDA_CLOSE = ')'
BLOCK_OPEN = <indent up>
BLOCK_CLOSE = <indent down>
COMMENT = r'//.*\n'

// inside `array`, `object` and `lambdaBlock` the indentation has no effect